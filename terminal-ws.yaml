apiVersion: v1
kind: Secret
metadata:
  labels:
    group: xuanji
  name: xuanji-terminal-ws-secret
type: Opaque
data:
  kubeconfig: 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: xuanji-terminal-ws
    group: xuanji
  name: terminal-ws
spec:
  replicas: 1
  selector:
    matchLabels:
      app: xuanji-terminal-ws
  template:
    metadata:
      labels:
        app: xuanji-terminal-ws
    spec:
      volumes:
          - name: kubeconfig
            secret:
                secretName: xuanji-terminal-ws-secret
                items: 
                  - key: kubeconfig
                    path: config
      containers:
        - image: duc/ws:v1
          imagePullPolicy: IfNotPresent
          name: app
          volumeMounts:
              - mountPath: /.kube
                name: kubeconfig
          command:
              - "/app"
              - "--kubeconfig=/.kube/config"
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
---
apiVersion: v1
kind: Service
metadata:
  labels:
    group: xuanji
  name: xuanji-terminal-ws-service
spec:
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
      nodePort: 32100
  selector:
    app: xuanji-terminal-ws
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  labels:
    group: xuanji
  name: xuanji-terminal-ws-ingress
spec:
  rules:
    - host: terminal.xuanji.local
      http:
        paths:
          - backend:
              serviceName: xuanji-terminal-ws-service
              servicePort: http
            path: /
  # tls:
  # - hosts:
  #   - ingress.k8s.local
  #   secretName: tls-secret
# ---
